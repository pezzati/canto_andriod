apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'io.fabric'


def superpowered_sdk_path = new File(projectDir, '../Superpowered')
def ffmpeg_path = new File(projectDir, './jniLibs')


android {
    signingConfigs {
        main {
            keyAlias 'Canto'
            keyPassword '789556#Canto::$%'
            storeFile file('../signingkeys/main.jks')
            storePassword '789556#Canto::$%'
        }
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "ir.canto_app.android"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 12
        versionName "0.9.19"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_PLATFORM=android-16', '-DANDROID_TOOLCHAIN=clang', '-DANDROID_ARM_NEON=TRUE', '-DANDROID_STL=c++_static', "-DPATH_TO_SUPERPOWERED:STRING=${superpowered_sdk_path}", "-DPATH_TO_FFMPEG:STRING=${ffmpeg_path}"
                cFlags '-O3', '-fsigned-char' // full optimization, char data type is signed
                cppFlags '-fsigned-char', "-I${superpowered_sdk_path}", "-I${ffmpeg_path}"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.main
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.main
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def project = "Canto"
            def SEP = "-"
            def buildType = variant.variantData.variantConfiguration.buildType.name
            def version = variant.versionName
            if (buildType == "debug") {
                buildType = "-" + buildType
            } else {
                buildType = ""
            }
            def buildAbi = ""
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            if (abi != null) {
                buildAbi = "-" + output.getFilter(com.android.build.OutputFile.ABI)
            }
            def flavor = variant.productFlavors[0].name
            def newApkName = project + SEP + "v" + version + "-" + flavor + buildType + buildAbi + ".apk"
            output.outputFileName = newApkName
        }
    }
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
//        exclude 'lib/armeabi-v7a/libRSSupport.so'
//        exclude 'lib/mips/libRSSupport.so'
//        exclude 'lib/arm64-v8a/libRSSupport.so'
    }
    /*splits {
        abi {
            enable true
            reset()
            include "armeabi-v7a", "arm64-v8a"
            universalApk false
        }
    }*/
//    sourceSets.main.jniLibs.srcDirs = ['./jniLibs/']
    flavorDimensions "market"
    productFlavors {
        cafebazaar {
            dimension "market"
            buildConfigField "String", "market", "\"cafebazaar\""
            buildConfigField "String", "payment", "\"market\""
        }
        canto {
            dimension "market"
            buildConfigField "String", "market", "\"canto\""
            buildConfigField "String", "payment", "\"zarinpal\""
        }
        googleplay {
            dimension "market"
            buildConfigField "String", "market", "\"googleplay\""
            buildConfigField "String", "payment", "\"zarinpal\""
        }
        iranapps {
            dimension "market"
            buildConfigField "String", "market", "\"iranapps\""
            buildConfigField "String", "payment", "\"market\""
        }
        myket {
            dimension "market"
            buildConfigField "String", "market", "\"myket\""
            buildConfigField "String", "payment", "\"market\""
        }
    }

    testOptions.unitTests.includeAndroidResources = true
}

dependencies {
//        implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.21.0'
    testImplementation 'androidx.test:core:1.1.0'
    testImplementation 'androidx.test:monitor:1.1.1'
    testImplementation 'androidx.test:runner:1.1.1'
    testImplementation 'org.robolectric:robolectric:4.2'

    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test:monitor:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    implementation 'androidx.fragment:fragment:1.1.0-alpha04'
    debugImplementation 'androidx.fragment:fragment-testing:1.1.0-alpha04'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.1.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.1.0-alpha02'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.1.0-alpha03'
    implementation 'androidx.media:media:1.1.0-alpha01'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0-alpha02'
    implementation 'androidx.room:room-runtime:2.1.0-alpha04'
    kapt 'androidx.room:room-compiler:2.1.0-alpha04'
    implementation 'androidx.room:room-rxjava2:2.1.0-alpha04'
    implementation 'androidx.lifecycle:lifecycle-reactivestreams:2.1.0-alpha02'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "android.arch.work:work-runtime-ktx:1.0.0-rc01"

    implementation 'com.google.android.gms:play-services-auth:16.0.1'
    implementation 'com.google.firebase:firebase-core:16.0.7'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.9'
    implementation 'com.google.firebase:firebase-perf:16.2.3'

    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'

    implementation 'com.google.code.gson:gson:2.8.5'

    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.5.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'

    implementation 'com.github.bumptech.glide:glide:4.8.0'
    kapt 'com.github.bumptech.glide:compiler:4.8.0'
    implementation 'jp.wasabeef:glide-transformations:3.3.0'

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.3'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'

    implementation 'com.jakewharton.rxbinding3:rxbinding:3.0.0-alpha1'

    implementation 'com.google.dagger:dagger:2.16'
    kapt "com.google.dagger:dagger-compiler:2.16"
    kaptTest "com.google.dagger:dagger-compiler:2.16"

    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation 'android.arch.navigation:navigation-fragment-ktx:1.0.0-beta02'
    implementation 'android.arch.navigation:navigation-ui-ktx:1.0.0-beta02'

    implementation 'com.karumi:dexter:5.0.0'

    implementation 'com.pixplicity.easyprefs:library:1.9.0@aar'
    implementation('com.alibaba.android:ultraviewpager:1.0.7.7@aar') {
        transitive = true
    }

    implementation 'com.romandanylyk:pageindicatorview:1.0.3'

    implementation 'com.azoft.carousellayoutmanager:carousel:1.2.4'

}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.firebase-perf'
//apply plugin: 'com.getkeepsafe.dexcount'

